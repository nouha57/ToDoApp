{"version":3,"sources":["Todo.js","AddTodo.js","App.js","serviceWorker.js","index.js"],"names":["Todo","todos","deleteTodo","todoList","length","map","todo","className","key","id","onClick","content","src","AddTodo","state","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","addTodo","class","type","onChange","this","variant","Component","App","deadline","category","filter","console","log","Math","random","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"kPA4BeA,EAzBF,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,MAAQC,EAAe,EAAfA,WAGbC,EAAWF,EAAMG,OACnBH,EAAMI,KAAI,SAAAC,GACN,OACI,yBAAKC,UAAU,kBAAkBC,IAAKF,EAAKG,IAC3C,0BAAMC,QAAS,WAAOR,EAAWI,EAAKG,MAAOH,EAAKK,aAK1D,yBAAKJ,UAAU,UAAf,IAAyB,2EACzB,yBAAKK,IAAI,+EAKT,OACA,yBAAKL,UAAU,oBACdJ,IC2BMU,E,4MAzCXC,MAAM,CACFH,QAAS,I,EAGbI,aAAe,SAACC,GACZ,EAAKC,SAAS,CACVN,QAASK,EAAEE,OAAOC,S,EAI1BC,aAAe,SAACJ,GACZA,EAAEK,iBACF,EAAKC,MAAMC,QAAQ,EAAKT,OACxB,EAAKG,SAAS,CACVN,QAAS,M,uDAMb,OACI,yBAAKa,MAAM,QAGX,sDACA,2BAAOC,KAAK,OAAOC,SAAUC,KAAKZ,aAAcI,MAAOQ,KAAKb,MAAMH,UAClE,8CACA,2BAAOc,KAAK,iBAAiBN,MAAM,qBAKpC,4BAAQT,QAAUiB,KAAKP,aAAcQ,QAAQ,gBAA7C,U,GAjCWC,aC8CPC,E,4MA7CbhB,MAAO,CACLb,MAAO,CACL,CAACQ,GAAG,EAAGE,QAAS,iBAAkBoB,SAAS,GAAIC,SAAS,IACxD,CAACvB,GAAG,EAAGE,QAAQ,kBAAmBoB,SAAS,GAAIC,SAAS,M,EAG5D9B,WAAa,SAACO,GACZ,IAAMR,EAAQ,EAAKa,MAAMb,MAAMgC,QAAO,SAAA3B,GAElC,OAAOA,EAAKG,IAAMA,KAEpB,EAAKQ,SAAS,CACZhB,MAAOA,IAEXiC,QAAQC,IAAI1B,I,EAEdc,QAAU,SAACjB,GACTA,EAAKG,GAAG2B,KAAKC,SACb,IAAIpC,EAAK,sBAAO,EAAKa,MAAMb,OAAlB,CAAyBK,IAClC,EAAKW,SAAS,CACZhB,W,uDAQF,OACE,yBAAKM,UAAU,OAEf,wBAAIA,UAAU,SAAd,YAKA,kBAAC,EAAD,CAAMN,MAAO0B,KAAKb,MAAMb,MAAOC,WAAYyB,KAAKzB,aAChD,kBAAC,EAAD,CAASqB,QAASI,KAAKJ,e,GAtCXM,aCIES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,c","file":"static/js/main.b26c3e53.chunk.js","sourcesContent":["import React from 'react';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\nconst Todo = ({todos , deleteTodo}) =>{\r\n\r\n\r\n    const todoList = todos.length ? (\r\n        todos.map(todo => {\r\n            return (\r\n                <div className=\"collection-item\" key={todo.id}>\r\n                <span onClick={() => {deleteTodo(todo.id)}}>{todo.content}</span>\r\n              \r\n              \r\n                </div>          );\r\n            })): (\r\n        <div className=\"center\"> <p>Congrats! You finished your tasks for today </p>\r\n        <img src=\"https://media.tenor.com/images/73cca45a93f91944b2c9fdd4b05c3c53/tenor.gif\"></img>\r\n        </div>)\r\n    \r\n      \r\n      \r\n        return(\r\n        <div className=\"todos collection\">\r\n        {todoList}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Todo;","\r\nimport React,{Component} from 'react';\r\nimport CheckBox from './CheckBox';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport Button from 'react-bootstrap/Button';\r\n\r\n\r\n\r\nclass AddTodo extends Component{\r\n    state={\r\n        content: '',\r\n       \r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({\r\n            content: e.target.value\r\n        })\r\n    }\r\n  \r\n    handleSubmit = (e) => {\r\n        e.preventDefault();\r\n        this.props.addTodo(this.state); //tzid l content to the state (defined in app )\r\n        this.setState({\r\n            content: '',\r\n    \r\n        }) //bch trajaa l blasa mtaa input fergha baad ma t'clicki aa bouton '\r\n    }\r\n    \r\n    render(){\r\n        return(\r\n            <div class=\"list\">\r\n          \r\n           \r\n            <label> Add description : </label>\r\n            <input type=\"text\" onChange={this.handleChange} value={this.state.content}/>\r\n            <label>Deadline : </label>\r\n            <input type=\"datetime-local\" value=\"2017-06-13T13:00\"></input>\r\n          \r\n           \r\n\r\n        \r\n           <button onClick= {this.handleSubmit} variant=\"outline-info\">+</button>\r\n              \r\n            \r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddTodo","import React, {Component} from 'react';\nimport Todo from './Todo';\nimport AddTodo from './AddTodo';\nimport Button from 'react-bootstrap/Button';\nimport  CheckBox  from './CheckBox';\nimport Dropdown from 'react-bootstrap/Dropdown';\n\n\nclass App extends Component{\n  state= {\n    todos: [\n      {id:1, content: 'buy some  milk', deadline:'', category:''},\n      {id:2, content:'play mario kart', deadline:'', category:''}\n    ]\n  }\n  deleteTodo = (id) => {\n    const todos = this.state.todos.filter(todo =>\n      {\n        return todo.id != id\n      });\n      this.setState({\n        todos: todos\n      })\n    console.log(id);\n  }\n  addTodo = (todo) =>{\n    todo.id=Math.random(); //so that the id's are unique s\n    let todos = [...this.state.todos, todo];\n    this.setState({\n      todos\n    })\n  }\n\n\n  \n\n  render(){\n    return(\n      <div className=\"App\">\n      \n      <h1 className=\"Title\">My Tasks</h1>\n      \n     \n     \n\n      <Todo todos={this.state.todos} deleteTodo={this.deleteTodo}/>\n      <AddTodo addTodo={this.addTodo}></AddTodo>\n    \n      \n      </div>\n    )\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}